) +
scale_color_manual(
values = c("Rzeczywiste" = "#00cc44", "Przewidywane" = "#ff4444"),
name = "Legenda"
) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey40") +
labs(
title = "Porównanie wartości rzeczywistych i przewidywanych",
x = "Rzeczywista klasa",
y = "Przewidywane prawdopodobieństwo"
) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
theme_minimal() +
theme(legend.position = "top")
git remote add origin https://github.com/Dux133/diabetes_R.git
echo "# diabetes_R" >> README.md
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_filtered
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_filtered)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_filtered), 0.7*nrow(df_filtered))
train <- df_filtered[train_idx,]
test <- df_filtered[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
df_filtered$Predicted <- predict(model, newdata = df_filtered)
head(df_filtered[c("Outcome", "Predicted")], 10)
library(ggplot2)
df_filtered$Predicted <- predict(model, type = "response")
ggplot(df_filtered, aes(x = factor(Outcome), y = Predicted)) +
geom_jitter(
aes(color = "Przewidywane"),
width = 0.1,
height = 0,
size = 2,
alpha = 0.7
) +
geom_point(
aes(y = Outcome, color = "Rzeczywiste"),
size = 2,
alpha = 0.3,
position = position_jitter(width = 0.1)
) +
scale_color_manual(
values = c("Rzeczywiste" = "#00cc44", "Przewidywane" = "#ff4444"),
name = "Legenda"
) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey40") +
labs(
title = "Porównanie wartości rzeczywistych i przewidywanych",
x = "Rzeczywista klasa",
y = "Przewidywane prawdopodobieństwo"
) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
theme_minimal() +
theme(legend.position = "top")
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_filtered
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_filtered
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
scale(df_model$Outcome) -> df_model$Outcome
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_filtered
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_filtered)
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_model)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_filtered), 0.7*nrow(df_filtered))
train <- df_filtered[train_idx,]
test <- df_filtered[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_model)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_model), 0.7*nrow(df_model))
train <- df_model[train_idx,]
test <- df_model[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
df_filtered$Predicted <- predict(model, newdata = df_filtered)
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_model)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_model), 0.7*nrow(df_model))
train <- df_model[train_idx,]
test <- df_model[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
df_filtered$Predicted <- predict(model, newdata = df_model)
head(df_filtered[c("Outcome", "Predicted")], 10)
library(ggplot2)
df_filtered$Predicted <- predict(model, type = "response")
ggplot(df_filtered, aes(x = factor(Outcome), y = Predicted)) +
geom_jitter(
aes(color = "Przewidywane"),
width = 0.1,
height = 0,
size = 2,
alpha = 0.7
) +
geom_point(
aes(y = Outcome, color = "Rzeczywiste"),
size = 2,
alpha = 0.3,
position = position_jitter(width = 0.1)
) +
scale_color_manual(
values = c("Rzeczywiste" = "#00cc44", "Przewidywane" = "#ff4444"),
name = "Legenda"
) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey40") +
labs(
title = "Porównanie wartości rzeczywistych i przewidywanych",
x = "Rzeczywista klasa",
y = "Przewidywane prawdopodobieństwo"
) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
theme_minimal() +
theme(legend.position = "top")
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_model)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_model), 0.7*nrow(df_model))
train <- df_model[train_idx,]
test <- df_model[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
df_filtered$Predicted <- predict(model, newdata = df_model)
head(df_filtered[c("Outcome", "Predicted")], 10)
library(ggplot2)
df_filtered$Predicted <- predict(model, type = "response")
ggplot(df_filtered, aes(x = factor(Outcome), y = Predicted)) +
geom_jitter(
aes(color = "Przewidywane"),
width = 0.1,
height = 0,
size = 2,
alpha = 0.7
) +
geom_point(
aes(y = Outcome, color = "Rzeczywiste"),
size = 2,
alpha = 0.3,
position = position_jitter(width = 0.1)
) +
scale_color_manual(
values = c("Rzeczywiste" = "#00cc44", "Przewidywane" = "#ff4444"),
name = "Legenda"
) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey40") +
labs(
title = "Porównanie wartości rzeczywistych i przewidywanych",
x = "Rzeczywista klasa",
y = "Przewidywane prawdopodobieństwo"
) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
theme_minimal() +
theme(legend.position = "top")
set.seed(123)
train_idx <- sample(1:nrow(df_model), 0.7*nrow(df_model))
train <- df_model[train_idx,]
test <- df_model[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
summary(final_model)
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_model)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_model), 0.7*nrow(df_model))
train <- df_model[train_idx,]
test <- df_model[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
summary(final_model)
df_filtered$Predicted <- predict(model, newdata = df_model)
head(df_filtered[c("Outcome", "Predicted")], 10)
library(ggplot2)
df_filtered$Predicted <- predict(model, type = "response")
ggplot(df_filtered, aes(x = factor(Outcome), y = Predicted)) +
geom_jitter(
aes(color = "Przewidywane"),
width = 0.1,
height = 0,
size = 2,
alpha = 0.7
) +
geom_point(
aes(y = Outcome, color = "Rzeczywiste"),
size = 2,
alpha = 0.3,
position = position_jitter(width = 0.1)
) +
scale_color_manual(
values = c("Rzeczywiste" = "#00cc44", "Przewidywane" = "#ff4444"),
name = "Legenda"
) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey40") +
labs(
title = "Porównanie wartości rzeczywistych i przewidywanych",
x = "Rzeczywista klasa",
y = "Przewidywane prawdopodobieństwo"
) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
theme_minimal() +
theme(legend.position = "top")
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_model)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_model), 0.8*nrow(df_model))
train <- df_model[train_idx,]
test <- df_model[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
summary(final_model)
df_filtered$Predicted <- predict(model, newdata = df_model)
head(df_filtered[c("Outcome", "Predicted")], 10)
library(ggplot2)
df_filtered$Predicted <- predict(model, type = "response")
ggplot(df_filtered, aes(x = factor(Outcome), y = Predicted)) +
geom_jitter(
aes(color = "Przewidywane"),
width = 0.1,
height = 0,
size = 2,
alpha = 0.7
) +
geom_point(
aes(y = Outcome, color = "Rzeczywiste"),
size = 2,
alpha = 0.3,
position = position_jitter(width = 0.1)
) +
scale_color_manual(
values = c("Rzeczywiste" = "#00cc44", "Przewidywane" = "#ff4444"),
name = "Legenda"
) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey40") +
labs(
title = "Porównanie wartości rzeczywistych i przewidywanych",
x = "Rzeczywista klasa",
y = "Przewidywane prawdopodobieństwo"
) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
theme_minimal() +
theme(legend.position = "top")
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_model)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_model), 0.7*nrow(df_model))
train <- df_model[train_idx,]
test <- df_model[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
summary(final_model)
df_filtered$Predicted <- predict(model, newdata = df_model)
head(df_filtered[c("Outcome", "Predicted")], 10)
library(ggplot2)
df_filtered$Predicted <- predict(model, type = "response")
ggplot(df_filtered, aes(x = factor(Outcome), y = Predicted)) +
geom_jitter(
aes(color = "Przewidywane"),
width = 0.1,
height = 0,
size = 2,
alpha = 0.7
) +
geom_point(
aes(y = Outcome, color = "Rzeczywiste"),
size = 2,
alpha = 0.3,
position = position_jitter(width = 0.1)
) +
scale_color_manual(
values = c("Rzeczywiste" = "#00cc44", "Przewidywane" = "#ff4444"),
name = "Legenda"
) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey40") +
labs(
title = "Porównanie wartości rzeczywistych i przewidywanych",
x = "Rzeczywista klasa",
y = "Przewidywane prawdopodobieństwo"
) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
theme_minimal() +
theme(legend.position = "top")
library(data.table)
library(dplyr)
library(corrplot)
df <- read.csv("diabetes.csv")
head(df)
summary(df)
df_filtered <- df %>%
filter(across(c(BMI, Insulin, SkinThickness, BloodPressure, Glucose), ~ .x != 0))
df_filtered %>%
rename(DPF = DiabetesPedigreeFunction) -> df_model
mat_cor <- cor(df_filtered)
corrplot(mat_cor)
head(df_filtered)
scale(df_model$Outcome) -> df_model$Outcome
model <- lm(Outcome ~ Glucose + BMI + DPF + Age,
data = df_model)
summary(model)
plot(model)
set.seed(123)
train_idx <- sample(1:nrow(df_model), 0.7*nrow(df_model))
train <- df_model[train_idx,]
test <- df_model[-train_idx,]
final_model <- lm(Outcome ~ Glucose + BMI + DPF + Age, data = train)
predictions <- predict(final_model, newdata = test)
summary(final_model)
df_filtered$Predicted <- predict(model, newdata = df_model)
head(df_filtered[c("Outcome", "Predicted")], 10)
library(ggplot2)
df_filtered$Predicted <- predict(model, type = "response")
ggplot(df_filtered, aes(x = factor(Outcome), y = Predicted)) +
geom_jitter(
aes(color = "Przewidywane"),
width = 0.1,
height = 0,
size = 2,
alpha = 0.7
) +
geom_point(
aes(y = Outcome, color = "Rzeczywiste"),
size = 2,
alpha = 0.3,
position = position_jitter(width = 0.0)
) +
scale_color_manual(
values = c("Rzeczywiste" = "#00cc44", "Przewidywane" = "#ff4444"),
name = "Legenda"
) +
geom_hline(yintercept = 0.5, linetype = "dashed", color = "grey40") +
labs(
title = "Porównanie wartości rzeczywistych i przewidywanych",
x = "Rzeczywista klasa",
y = "Przewidywane prawdopodobieństwo"
) +
scale_y_continuous(breaks = seq(0, 1, 0.25)) +
theme_minimal() +
theme(legend.position = "top")
